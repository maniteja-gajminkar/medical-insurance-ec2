name: MLflow Train Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  ml-train:
    runs-on: ubuntu-latest
    env:
      INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      REGION: ${{ secrets.AWS_REGION }}
      ROLE: ${{ secrets.AWS_ROLE_TO_ASSUME }}

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE }}
          aws-region: ${{ env.REGION }}

      - name: Debug EC2 Instance ID
        run: echo "Targeting EC2 instance: $INSTANCE_ID"

      - name: ðŸš€ Deploy & Train on EC2 via SSM (simple, YAML-safe)
        run: |
          set -euo pipefail

          ssm() {
            local CMD="$1"
            local MSG="$2"
            echo "::group::${MSG}"
            CID=$(aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --instance-ids "$INSTANCE_ID" \
              --region "$REGION" \
              --comment "$MSG" \
              --parameters commands="$CMD" \
              --query "Command.CommandId" --output text)
            echo "CommandId: $CID"
            aws ssm wait command-executed --command-id "$CID" --instance-id "$INSTANCE_ID" --region "$REGION"
            aws ssm get-command-invocation \
              --command-id "$CID" --instance-id "$INSTANCE_ID" --region "$REGION" \
              --query '{Status:Status, StandardOutput:StandardOutputContent, StandardError:StandardErrorContent}' \
              --output json
            echo "::endgroup::"
          }

          # 1) Install system deps (git, pip)
          ssm "sudo yum install -y git python3-pip && python3 -m pip install --upgrade pip" \
              "Install git & pip"

          # 2) Clone or update repo
          ssm "if [ -d /home/ec2-user/medical-insurance-ec2/.git ]; then cd /home/ec2-user/medical-insurance-ec2 && git pull --ff-only; else git clone https://github.com/maniteja-gajminkar/medical-insurance-ec2.git /home/ec2-user/medical-insurance-ec2; fi && ls -la /home/ec2-user/medical-insurance-ec2" \
              "Clone/update repository"

          # 3) Install Python requirements from your requirements.txt
          ssm "cd /home/ec2-user/medical-insurance-ec2 && python3 -m pip install -r requirements.txt" \
              "Install Python dependencies"

          # 4) Start MLflow server in background if not already running
          ssm "if ss -lntp | grep -q :5000; then echo MLflow already running; else nohup mlflow server --backend-store-uri sqlite:////home/ec2-user/mlflow.db --default-artifact-root s3://mlflow-artifacts-maniteja --host 0.0.0.0 --port 5000 > /home/ec2-user/mlflow.log 2>&1 & sleep 2; fi && tail -n 30 /home/ec2-user/mlflow.log || true" \
              "Ensure MLflow server is running"

          # 5) Run training (logs to MLflow + stores artifacts in S3)
          ssm "cd /home/ec2-user/medical-insurance-ec2 && export MLFLOW_TRACKING_URI=http://127.0.0.1:5000 && python3 train.py" \
              "Run training script"
