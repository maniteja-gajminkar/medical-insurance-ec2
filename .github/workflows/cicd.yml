name: Deploy and Train

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-and-train:
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Build SSM parameters JSON for starting MLflow without jq/apt
      - name: 🧱 Prepare SSM params (start MLflow)
        run: |
          cat > start-mlflow.json <<'JSON'
          {
            "commands": [
              "set -euo pipefail",
              "sudo mkdir -p /opt/mlflow && sudo chown ec2-user:ec2-user /opt/mlflow",
              "python3 -m pip install --upgrade pip >/dev/null 2>&1 || true",
              "python3 -m pip show mlflow >/dev/null 2>&1 || python3 -m pip install mlflow >/dev/null 2>&1",
              "if ss -lntp | grep -q \":5000\"; then echo MLflow already listening on :5000; else nohup $(command -v mlflow) server --backend-store-uri sqlite:////opt/mlflow/mlflow.db --default-artifact-root s3://mlflow-artifacts-maniteja --host 0.0.0.0 --port 5000 > /opt/mlflow/mlflow.log 2>&1 & sleep 2; fi",
              "echo MLflow log tail:",
              "tail -n 80 /opt/mlflow/mlflow.log || true"
            ]
          }
          JSON

      - name: ▶️ Start MLflow on EC2 (nohup via SSM)
        env:
          INSTANCE_ID: i-0ebb50246a4b9c539
          REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=${INSTANCE_ID}" \
            --comment "Ensure MLflow server running" \
            --parameters file://start-mlflow.json \
            --region "${REGION}" >/dev/null

      # Public UI check is optional; won't fail the job if SG blocks it
      - name: 🔍 Health check MLflow (public UI)
        run: |
          echo "Checking MLflow UI http://35.171.186.148:5000 ..."
          curl -sSf "http://35.171.186.148:5000" >/dev/null && echo "✅ UI reachable" || echo "⚠️ UI not reachable (maybe SG/firewall). Proceeding..."

      # Build SSM parameters JSON for training without jq/apt
      - name: 🧱 Prepare SSM params (train)
        run: |
          cat > run-train.json <<'JSON'
          {
            "commands": [
              "set -euo pipefail",
              "cd /home/ec2-user/medical-insurance-ec2",
              "[ -f requirements.txt ] && python3 -m pip install -r requirements.txt || python3 -m pip install pandas scikit-learn mlflow",
              "export MLFLOW_TRACKING_URI=http://127.0.0.1:5000",
              "python3 train.py"
            ]
          }
          JSON

      - name: 🚀 Trigger training on EC2 via SSM (wait & print logs, self-healing)
        env:
          INSTANCE_ID: i-0ebb50246a4b9c539
          REGION: ${{ secrets.AWS_REGION }}
          REPO_URL: https://github.com/maniteja-gajminkar/medical-insurance-ec2.git
          REPO_DIR: /home/ec2-user/medical-insurance-ec2
        run: |
          set -euo pipefail

          cat > run-train.json <<'JSON'
          {
            "commands": [
              "set -euxo pipefail",
              "echo '== whoami / python =='; whoami; command -v python3 || true; python3 --version || true",
              "echo '== ensure git ==' ; sudo yum -y install git || true",
              "echo '== ensure repo exists ==' ; if [ ! -d /home/ec2-user/medical-insurance-ec2/.git ]; then git clone https://github.com/maniteja-gajminkar/medical-insurance-ec2.git /home/ec2-user/medical-insurance-ec2; else cd /home/ec2-user/medical-insurance-ec2 && git pull --ff-only; fi",
              "echo '== list repo ==' ; ls -la /home/ec2-user/medical-insurance-ec2 || true",
              "echo '== ensure deps ==' ; cd /home/ec2-user/medical-insurance-ec2 ; if [ -f requirements.txt ]; then python3 -m pip install --upgrade pip && python3 -m pip install -r requirements.txt; else python3 -m pip install --upgrade pip && python3 -m pip install pandas scikit-learn mlflow; fi",
              "echo '== check mlflow server API ==' ; curl -sSf http://127.0.0.1:5000/api/2.0/mlflow/experiments/list >/dev/null",
              "echo '== run training ==' ; export MLFLOW_TRACKING_URI=http://127.0.0.1:5000 ; cd /home/ec2-user/medical-insurance-ec2 ; python3 train.py | tee -a train.log",
              "echo '== train exit code ==' ; echo $?"
            ]
          }
          JSON

          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=${INSTANCE_ID}" \
            --comment "Trigger MLflow training (verbose)" \
            --parameters file://run-train.json \
            --region "${REGION}" \
            --query "Command.CommandId" --output text)

          echo "SSM CommandId: $CMD_ID"

          # Wait for completion
          for i in {1..60}; do
            STATUS=$(aws ssm list-command-invocations --command-id "$CMD_ID" --details \
              --query "CommandInvocations[0].Status" --output text --region "${REGION}" || true)
            echo "Status: $STATUS"
            case "$STATUS" in
              Success|Cancelled|Failed|TimedOut) break ;;
            esac
            sleep 5
          done

          echo "----- STDOUT / STDERR from instance -----"
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id "$INSTANCE_ID" \
            --region "${REGION}" \
            --query '{Status:Status, StandardOutput:StandardOutputContent, StandardError:StandardErrorContent}' \
            --output json