name: Bootstrap MLflow on existing EC2 and Train

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  INSTANCE_ID: i-0ebb50246a4b9c539             # <-- your existing EC2 instance
  BUCKET_NAME: mlflow-artifacts-maniteja        # <-- your existing S3 bucket
  MLFLOW_PORT: "5000"

jobs:
  bootstrap-and-train:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # OIDC â†’ short-lived AWS creds (no access keys needed)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::274363548500:role/githubactions-s3oidcrole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-mlflow-ssm-${{ github.run_id }}

      # Use SSM to install MLflow + boto3 and run as a systemd service on your EC2
      - name: Bootstrap MLflow Tracking Server via SSM
        id: ssm
        run: |
          CMD=$(cat <<EOF
          set -euo pipefail
          sudo yum update -y
          sudo yum install -y python3-pip awscli
          sudo pip3 install --upgrade pip
          sudo pip3 install mlflow boto3
          sudo mkdir -p /home/ec2-user/mlflow
          sudo chown ec2-user:ec2-user /home/ec2-user/mlflow
          sudo bash -c 'cat >/etc/systemd/system/mlflow.service <<EOT
          [Unit]
          Description=MLflow Tracking Server
          After=network.target
          [Service]
          User=ec2-user
          WorkingDirectory=/home/ec2-user/mlflow
          ExecStart=/usr/local/bin/mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root s3://${{ env.BUCKET_NAME }} --host 0.0.0.0 --port ${{ env.MLFLOW_PORT }}
          Restart=always
          [Install]
          WantedBy=multi-user.target
          EOT'
          sudo systemctl daemon-reload
          sudo systemctl enable --now mlflow
          sudo systemctl status mlflow --no-pager
          EOF
          )
          RESP=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="$CMD" \
            --query "Command.CommandId" --output text)
          echo "cmd_id=$RESP" >> $GITHUB_OUTPUT

      - name: Wait for SSM command to finish
        run: |
          CMD_ID="${{ steps.ssm.outputs.cmd_id }}"
          for i in {1..60}; do
            STATUS=$(aws ssm list-command-invocations --command-id "$CMD_ID" --details \
              --query "CommandInvocations[0].Status" --output text)
            echo "SSM status: $STATUS"
            if [ "$STATUS" = "Success" ]; then exit 0; fi
            if [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              aws ssm list-command-invocations --command-id "$CMD_ID" --details
              exit 1
            fi
            sleep 10
          done
          echo "SSM command timed out"; exit 1

      - name: Discover MLflow server public IP
        id: ip
        run: |
          IP=$(aws ec2 describe-instances --instance-ids "${{ env.INSTANCE_ID }}" \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "ip=$IP" >> $GITHUB_OUTPUT
          echo "MLFLOW_TRACKING_URI=http://$IP:${{ env.MLFLOW_PORT }}" >> $GITHUB_ENV
          echo "MLflow UI => http://$IP:${{ env.MLFLOW_PORT }}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train and log to MLflow
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        run: |
          echo "Using MLflow at $MLFLOW_TRACKING_URI"
          python train.py

      - name: Show MLflow URL
        run: echo "Open MLflow UI: http://${{ steps.ip.outputs.ip }}:${{ env.MLFLOW_PORT }}"